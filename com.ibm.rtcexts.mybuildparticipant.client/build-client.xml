<?xml version="1.0" encoding="UTF-8"?>
<project name="com.ibm.rtcexts.mybuildparticipant.client" default="build.jars" basedir=".">

	<!--properties-->
	<property environment="env" />
	<property name="build.dir" value="${basedir}" />
	<!--build.env is a build input. default value is taken from machine name. Appropriate for dev only-->
	<property name="build.env" value="local/${env.HOSTNAME}" />
	<echo message='build.env has been set to ${build.env}.' />
	<echo message='Loading overrides from ${build.common}/config/host/${build.env}-build.properties' />
	<!--host-->
	<property file="${build.dir}/config/host/${build.env}-build.properties" />
	<!--defaults-->
	<property file="${build.dir}/config/plugin-build-default.properties" />
	<echo message='Loading defaults from ${build.dir}/config/plugin-build-default.properties' />

	<import file="${build.dir}/target-environment-classpath-include.xml" />

	<import file="${build.common}/macrodef/test.xml" />

	<import file="${build.dir}/includes/classpath-include.xml" />
	
	<property name="p2.build.repo" value="file:${build.dir}/buildRepo" />
	<property name="basews" value="${ws}" />
	<property name="baseos" value="${os}" />
	<property name="basearch" value="${arch}" />
	<property name="basenl" value="${nl}" />
	<property name="bundleId" value="${build.plugin.name}" />
	<property name="bundleVersion" value="${build.plugin.version}" />
	<property name="p2.publishonerror" value="false" />

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="false" />
	<property name="javacDebugInfo" value="on" />
	<property name="javacVerbose" value="false" />
	<property name="logExtension" value=".log" />
	<property name="compilerArg" value="" />
	<property name="compilation.prereq.log" value="${buildDirectory}/prereqErrors.log" />
	<property name="javacSource" value="${environment.javacSource}" />
	<property name="javacTarget" value="${environment.javacTarget}" />

	<condition property="dir_bootclasspath" value="${java.home}/../Classes">
		<os family="mac" />
	</condition>
	<property name="dir_bootclasspath" value="${java.home}/lib" />
	<path id="path_bootclasspath">
		<fileset dir="${dir_bootclasspath}">
			<include name="*.jar" />
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath" />
	<condition property="bundleBootClasspath" value="${JavaSE-1.6}">
		<isset property="JavaSE-1.6" />
	</condition>
	<condition property="bundleJavacSource" value="1.6">
		<isset property="JavaSE-1.6" />
	</condition>
	<condition property="bundleJavacTarget" value="1.6">
		<isset property="JavaSE-1.6" />
	</condition>
	<property name="bundleJavacSource" value="${javacSource}" />
	<property name="bundleJavacTarget" value="${javacTarget}" />
	<property name="bundleBootClasspath" value="${bootclasspath}" />

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder" />
		</condition>
		<property name="pluginTemp" value="${basedir}" />
		
		<property name="temp.folder" value="${basedir}/temp.folder" />
		<property name="plugin.destination" value="${basedir}" />
		<condition property="p2.publish.parts" value="true">
			<istrue value="${p2.gathering}" />
		</condition>
		<property name="compilation.problem.marker" value="${build.result.folder}/compilation.problem" />
		<condition property="compilation.problem.marker.exists" value="true">
			<and>
				<available file="${compilation.problem.marker}" />
				<isfalse value="${p2.publishonerror}" />
			</and>
		</condition>
		<echo message="initialising user home ant folder at ${user.home}"/>
		<mkdir dir="${user.home}/.ant/lib" />
		<copy todir="${user.home}/.ant/lib" failonerror="false" >
			<fileset dir="lib" includes="*.jar" />
			<fileset dir="${build.groovy.home}/embeddable" includes="*.jar" />
		</copy>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />

	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: ${bundleId} for an update site.">
		<delete dir="${temp.folder}" />
		<mkdir dir="${temp.folder}" />
		<antcall target="build.jars" />
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<jar destfile="${plugin.destination}/${bundleId}_${bundleVersion}.jar" basedir="${temp.folder}/${bundleId}_${bundleVersion}" filesetmanifest="merge" />
		<delete dir="${temp.folder}" />
	</target>
	
	<path id="classpath.spock">
		<fileset file="${build.common}/lib/spock-core-0.7-groovy-1.8.jar" />
		<fileset file="${build.common}/lib/objenesis-1.3.jar" />
		<fileset file="${build.common}/lib/cglib-nodep-2.2.3.jar" />
		<fileset dir="${build.groovy.home}/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<path id="classpath.junit.mockito">
		<fileset dir="${build.common}/lib/junit-mockito">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<path id="build.targetEnvironment.classpath">
		<fileset dir="${build.target.environment}">
			<include name="**/*.jar"/>
			<exclude name="**/*test*/**" />
			<exclude name="**/*test*" />
			<exclude name="**/*org.apache.ant*/**" />
			<exclude name="**/*org.apache.ant*" />
		</fileset>
	</path>
	
	<path id="plugin.test.classpath">
		<path refid="build.classpath" />
		<path refid="classpath.spock" />
		<path refid="classpath.junit.mockito" />
		<pathelement location="${classes.dir}" />
	</path>
	
	<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="classpath.spock" />
		
	<target name="compile" depends="clean,init" unless="main-classes" description="compiling plugin: ${bundleId}.">
		<delete dir="${classes.dir}" />
		<mkdir dir="${classes.dir}" />
		<!-- compile the source code -->
		<echo message='destdir="${classes.dir}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}"' />
		<echo message='compilerarg line="${compilerArg}" compiler="${build.compiler}" ' />
		<echo message='classpath refid="build.classpath"' />
		<echo message='src path="${src.dir}"' />
		<echo message='@${basedir}/javaCompiler...args" compiler="org.eclipse.jdt.core.JDTCompilerAdapter' />
		<echo message='compilerarg line="-log &apos;${classes.dir}/${logExtension}&apos;" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"' />
		<javac destdir="${classes.dir}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}">
			<compilerarg line="${compilerArg}" compiler="${build.compiler}" />
			<classpath refid="build.classpath" />
			<src path="${src.dir}" />
			<compilerarg line="-log &apos;${classes.dir}/${logExtension}&apos;" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />
		</javac>
				
		<antcall target="checkCompilationResults" />
		<!-- Copy necessary resources -->
		<copy todir="${classes.dir}" failonerror="true" overwrite="false">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
				<exclude name="**/package.htm*" />
			</fileset>
		</copy>
	</target>
	
	<target name="test.compile" depends="clean,init,compile" unless="test-classes" description="compiling plugin: ${bundleId} for test.">
		<delete dir="${test.classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
		<groovyc srcdir="${test.src.dir}" destdir="${test.classes.dir}">
			<classpath>
				<path refid="plugin.test.classpath" />
			</classpath>
		</groovyc>
		<javac destdir="${test.classes.dir}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}">
			<compilerarg line="${compilerArg}" compiler="${build.compiler}" />
			<classpath refid="plugin.test.classpath" />
			<src path="${test.src.dir}" />
			<compilerarg value="@${basedir}/javaCompiler...args" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />
			<compilerarg line="-log &apos;${classes.dir}/${logExtension}&apos;" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" />
		</javac>
		
	</target>
	
	<target name="test" depends="test.compile" description="test plugin: ${bundleId}.">
		<delete dir="${test.reports.dir}" />
		<mkdir dir="${test.reports.dir}" />
		<mkdir dir="${test.reports.dir}/xml" />
		<junit-module 
			module.classpath="plugin.test.classpath" 
			classes.test.dir="${test.classes.dir}"
			fork="true"
			test.xml.reports.dir="${test.xml.reports.dir}" />
	</target>

	<target name="src.zip" depends="init" unless="src.zip">
		<mkdir dir="${build.result.folder}" />
		<antcall target="zip.src.zip" />
	</target>
	<target name="zip.src.zip">
		<zip destfile="${build.result.folder}/src.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</zip>
	</target>
	<target name="copy.src.zip">
		<copy todir="${source.destination.folder}/" failonerror="true" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="build.jars" depends="init" description="Compile classes and build nested jars for the plug-in: ${bundleId}.">
		<delete file="${compilation.problem.marker}" quiet="true" />
		<echo message="compile" />
		<antcall target="compile" />
	</target>

	<target name="checkCompilationResults" if="compilation.error.occured">
		<echo file="${compilation.problem.marker}" message="${bundleId}_${bundleVersion}${line.separator}compilation.error.occured=${compilation.error.occured}" />
		<eclipse.logCompileError bundle="${bundleId}_${bundleVersion}" log="${compilation.prereq.log}">
		</eclipse.logCompileError>
	</target>

	<target name="build.sources" depends="init">
		<available property="src.zip" file="${build.result.folder}/src.zip" />
		<antcall target="src.zip" />
	</target>

	<target name="publish.bin.parts" depends="init" if="p2.publish.parts" unless="compilation.problem.marker.exists">
		<mkdir dir="${build.result.folder}/${bundleId}_${bundleVersion}" />
		<copy todir="${build.result.folder}" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/MANIFEST.MF" />
				<include name="plugin.xml" />
				<include name="fragment.xml" />
			</fileset>
		</copy>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${build.result.folder}" />
			<param name="projectLocation" value="${basedir}" />
			<param name="binary.folders" value="${build.result.folder}" />
			<param name="projectName" value="${bundleId}_${bundleVersion}" />
		</antcall>
		<eclipse.gatherBundle metadataRepository="${p2.build.repo}" artifactRepository="${p2.build.repo}" buildResultFolder="${build.result.folder}" baseDirectory="${basedir}" />
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
		<copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="false">
			<fileset dir="${classes.dir}">
				<include name="**" />
			</fileset>
		</copy>
		<copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="plugin.xml" />
				<include name="META-INF/" />
				<include name="lib/" />
			</fileset>
		</copy>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
			<param name="projectLocation" value="${basedir}" />
			<param name="binary.folders" value="${build.result.folder}" />
			<param name="projectName" value="${bundleId}_${bundleVersion}" />
		</antcall>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
		<copy file="${build.result.folder}/src.zip" todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="false" overwrite="false" />
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
		</antcall>
	</target>

	<target name="gather.individual.sources" depends="init">
		<antcall target="copy.src.zip">
			<param name="source.destination.folder" value="${destination.temp.folder}" />
		</antcall>
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}" />
		</antcall>
	</target>

	<target name="copy.src.includes" depends="init">
		<copy todir="${source.destination.folder}" failonerror="false" overwrite="false">
			<fileset dir="${basedir}">
				<include name="${src.dir}/com/" />
			</fileset>
		</copy>
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/${bundleId}_${bundleVersion}" />
		<copy todir="${destination.temp.folder}/${bundleId}_${bundleVersion}" failonerror="false" overwrite="false">
			<fileset dir="${build.result.folder}">
				<include name="${logExtension}" />
			</fileset>
		</copy>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: ${bundleId} of all the zips, jars and logs created.">
		<delete dir="${build.result.folder}" />
		<delete file="${build.result.folder}/src.zip" />
		<delete file="${plugin.destination}/${bundleId}_${bundleVersion}.jar" />
		<delete file="${plugin.destination}/${bundleId}_${bundleVersion}.zip" />
		<delete dir="${temp.folder}" />
		<delete file="${compilation.problem.marker}" quiet="true" />
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="/home/adminuser/workspace/RTC_Plugin_Client/${bundleId}" property="resourcePath" />
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: ${bundleId}.">
		<delete dir="${temp.folder}" />
		<mkdir dir="${temp.folder}" />
		<antcall target="build.jars" />
		<antcall target="build.sources" />
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/" />
		</antcall>
		<delete>
			<fileset dir="${temp.folder}">
				<include name="**/*.bin${logExtension}" />
			</fileset>
		</delete>
		<zip destfile="${plugin.destination}/${bundleId}_${bundleVersion}.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false" />
		<delete dir="${temp.folder}" />
	</target>

	<target name="apitools.generation" if="generateAPIDescription">
		<apitooling.apigeneration projectName="${projectName}" project="${projectLocation}" binary="${binary.folders}" target="${target.folder}" extramanifests="${extraManifests}" />
	</target>

	<target name="clean.eclipse.plugin.dir">
		<echo message='cleaning plugin id ${bundleId} from ${build.jbe.plugins}' />
		<delete verbose="true">
			<fileset dir="${build.eclipse.plugins}" includes="${bundleId}*.jar" />
		</delete>
	</target>

	<target name="deploy.to.build.eclipse" depends="clean.eclipse.plugin.dir,build.update.jar" description="deploying plugin to ${build.jbe.plugins}">
		<copy todir="${build.eclipse.plugins}" overwrite="true">
			<fileset dir="${plugin.destination}" includes="${bundleId}_${bundleVersion}.jar" />
		</copy>
	</target>


</project>
