<?xml version="1.0" encoding="UTF-8"?>
<project name="com.ibm.rtcexts.mybuildparticipant.feature" default="build.update.jar" basedir=".">

	<!--properties-->
	<property environment="env" />
	<property name="build.dir" value="${basedir}" />
	<property name="build.project.path" value="${build.dir}/../RTC_Plugin_Build" />
	<!--build.env is a build input. default value is taken from machine name. Appropriate for dev only-->
	<property name="build.env" value="local/${env.HOSTNAME}" />
	<echo message='build.env has been set to ${build.env}.' />
	<echo message='Loading overrides from ${build.dir}/config/host/${build.env}-build.properties' />
	<!--host-->
	<property file="${build.dir}/config/host/${build.env}-build.properties" />
	<!--defaults-->
	<property file="${build.dir}/config/plugin-build-default.properties" />
	<echo message='Loading defaults from ${build.dir}/config/plugin-build-default.properties' />


	<property name="featureId" value="${build.feature.name}" />
	<property name="featureVersion" value="${build.feature.version}" />



	<target name="init">
		<property name="feature.temp.folder" value="${basedir}/feature.temp.folder" />
		<property name="feature.destination" value="${basedir}" />
		<property name="p2.build.repo" value="file:${build.dir}/buildRepo" />
		<condition property="p2.publish.parts" value="true">
			<istrue value="${p2.gathering}" />
		</condition>
	</target>
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<target name="all.plugins" depends="init">
		<for list="${build.included.plugins.build.files}" param="plugin.build.file.path">
			<sequential>
				<echo message='feature build is executing target: ${target} on plugin build: @{plugin.build.file.path}' />
				<dirname file="@{plugin.build.file.path}" property="@{plugin.build.file.path}.parent.dir" />
				<basename file="@{plugin.build.file.path}" property="@{plugin.build.file.path}.filename" />
				<ant antfile="${@{plugin.build.file.path}.filename}" dir="${@{plugin.build.file.path}.parent.dir}" target="${target}" inheritall="false">
					<property name="arch" value="x86_64" />
					<property name="ws" value="gtk" />
					<property name="os" value="linux" />
				</ant>
			</sequential>
		</for>
	</target>
	<target name="all.features" depends="init">
	</target>
	<target name="update.feature" depends="init">
	</target>

	<target name="all.children" depends="init,all.features,all.plugins,update.feature">
	</target>

	<target name="children" if="include.children">
		<antcall target="all.children" />
	</target>

	<target name="build.jars" depends="init" description="Build all the jars for the feature: ${featureId}.">
		<antcall target="all.children">
			<param name="target" value="build.jars" />
		</antcall>
	</target>

	<target name="build.sources" depends="init">
		<antcall target="all.children">
			<param name="target" value="build.sources" />
		</antcall>
	</target>

	<target name="build.zips" depends="init">
		<antcall target="all.children">
			<param name="target" value="build.zips" />
		</antcall>
	</target>

	<target name="build.update.jar" depends="init" description="Build the feature jar of: ${featureId} for an update site.">
		<antcall target="all.children">
			<param name="target" value="build.update.jar" />
		</antcall>
		<property name="feature.base" value="${feature.temp.folder}" />
		<delete dir="${feature.temp.folder}" />
		<mkdir dir="${feature.temp.folder}" />
		<mkdir dir="${feature.temp.folder}/features/${featureId}_${featureVersion}" />
		<antcall target="gather.bin.parts" inheritAll="false">
			<param name="os" value="*" />
			<param name="feature.base" value="${feature.temp.folder}" />
			<param name="updateJar.omitRootfiles" value="true" />
			<param name="ws" value="*" />
			<param name="arch" value="*" />
			<param name="nl" value="*" />
		</antcall>
		<jar destfile="${feature.destination}/${featureId}_${featureVersion}.jar" basedir="${feature.temp.folder}/features/${featureId}_${featureVersion}" />
		<delete dir="${feature.temp.folder}" />
	</target>

	<target name="publish.bin.parts" depends="init" if="p2.publish.parts">
		<mkdir dir="${feature.temp.folder}/features/${featureId}_${featureVersion}" />
		<copy todir="${feature.temp.folder}/features/${featureId}_${featureVersion}" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="feature.xml" />
			</fileset>
		</copy>
		<eclipse.idReplacer featureFilePath="${feature.temp.folder}/features/${featureId}_${featureVersion}/feature.xml" selfVersion="${featureVersion}" featureIds="" pluginIds="${build.plugins.ids.csv}," />
		<eclipse.gatherFeature metadataRepository="${p2.build.repo}" artifactRepository="${p2.build.repo}" buildResultFolder="${feature.temp.folder}/features/${featureId}_${featureVersion}" baseDirectory="${basedir}" />
	</target>



	<target name="gather.bin.parts" depends="init" if="feature.base">
		<mkdir dir="${feature.base}/features/${featureId}_${featureVersion}" />
		<antcall target="children">
			<param name="target" value="gather.bin.parts" />
			<param name="destination.temp.folder" value="${feature.base}/plugins" />
		</antcall>
		<copy todir="${feature.base}/features/${featureId}_${featureVersion}" failonerror="true" overwrite="false">
			<fileset dir="${basedir}">
				<include name="feature.xml" />
			</fileset>
		</copy>
		<eclipse.idReplacer featureFilePath="${feature.base}/features/${featureId}_${featureVersion}/feature.xml" selfVersion="${featureVersion}" featureIds="" pluginIds="${build.plugins.ids.csv}," />
	</target>

	<target name="zip.distribution" depends="init" description="Create a zip containing all the plug-ins and features for the feature: ${featureId}.">
		<delete dir="${feature.temp.folder}" />
		<mkdir dir="${feature.temp.folder}" />
		<antcall target="gather.bin.parts">
			<param name="feature.base" value="${feature.temp.folder}" />
			<param name="os" value="*" />
			<param name="arch" value="*" />
			<param name="ws" value="*" />
			<param name="nl" value="*" />
			<param name="include.children" value="true" />
		</antcall>
		<zip destfile="${feature.destination}/${featureId}_${featureVersion}.bin.dist.zip" basedir="${feature.temp.folder}" filesonly="false" whenempty="skip" update="false" />
		<delete dir="${feature.temp.folder}" />
	</target>

	<target name="zip.sources" depends="init">
		<delete dir="${feature.temp.folder}" />
		<mkdir dir="${feature.temp.folder}" />
		<antcall target="all.children">
			<param name="target" value="gather.sources" />
			<param name="destination.temp.folder" value="${feature.temp.folder}/plugins/${featureId}.source_${featureVersion}/src" />
			<param name="include.children" value="true" />
		</antcall>
		<zip destfile="${feature.destination}/${featureId}_${featureVersion}.src.zip" basedir="${feature.temp.folder}" filesonly="true" whenempty="skip" update="false" />
		<delete dir="${feature.temp.folder}" />
	</target>

	<target name="zip.logs" depends="init">
		<delete dir="${feature.temp.folder}" />
		<mkdir dir="${feature.temp.folder}" />
		<condition property="logExtension.param" value="logExtension" else="logExtension.param">
			<isset property="logExtension" />
		</condition>
		<antcall target="all.children" inheritAll="false">
			<param name="target" value="gather.logs" />
			<param name="destination.temp.folder" value="${feature.temp.folder}/plugins" />
			<param name="include.children" value="true" />
			<param name="${logExtension.param}" value="${logExtension}" />
		</antcall>
		<zip destfile="${feature.destination}/${featureId}_${featureVersion}.log.zip" basedir="${feature.temp.folder}" filesonly="true" whenempty="skip" update="false" />
		<delete dir="${feature.temp.folder}" />
	</target>

	<target name="clean" depends="init" description="Clean the feature: ${featureId} of all the zips, jars and logs created.">
		<delete file="${feature.destination}/${featureId}_${featureVersion}.jar" />
		<delete file="${feature.destination}/${featureId}_${featureVersion}.bin.dist.zip" />
		<delete file="${feature.destination}/${featureId}_${featureVersion}.log.zip" />
		<delete file="${feature.destination}/${featureId}_${featureVersion}.src.zip" />
		<delete dir="${feature.temp.folder}" />
		<antcall target="all.children">
			<param name="target" value="clean" />
		</antcall>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="/home/adminuser/workspace/RTC_Plugin_Client/${featureId}/" property="resourcePath" />
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />
		<antcall target="all.children">
			<param name="target" value="refresh" />
		</antcall>
	</target>
	<target name="gather.sources">
		<antcall target="children">
			<param name="target" value="gather.sources" />
			<param name="destination.temp.folder" value="${feature.temp.folder}/plugins/${featureId}.source_${featureVersion}/src" />
		</antcall>
	</target>

	<target name="gather.logs" depends="init">
		<mkdir dir="${feature.temp.folder}/plugins" />
		<property name="destination.temp.folder" value="${feature.temp.folder}/plugins" />
		<condition property="logExtension.param" value="logExtension" else="logExtension.param">
			<isset property="logExtension" />
		</condition>
		<antcall target="all.children" inheritAll="false">
			<param name="target" value="gather.logs" />
			<param name="${logExtension.param}" value="${logExtension}" />
			<param name="destination.temp.folder" value="${feature.temp.folder}/plugins" />
		</antcall>
	</target>

	<target name="publish.updatesite" description="description">
		<eclipse.publish.featuresAndBundles repository="file:/tmp/repo" site="file:/${basedir}/../com.ibm.rtcexts.mybuildparticipant.updatesite/site.xml">
			<features dir="." includes="com.ibm.rtcexts.mybuildparticipant.feature_${build.feature.version}.jar" />
			<bundles dir="../com.ibm.rtcexts.mybuildparticipant.common" includes="../com.ibm.rtcexts.mybuildparticipant.common_${build.common.version}.jar" />
			<bundles dir="../com.ibm.rtcexts.mybuildparticipant.client" includes="file:///home/adminuser/workspace/RTC_Plugin_Client/com.ibm.rtcexts.mybuildparticipant.client/com.ibm.rtcexts.mybuildparticipant.client_${build.client.version}.jar" />
		</eclipse.publish.featuresAndBundles>
		<mkdir dir="/tmp/repo/features" />
		<mkdir dir="/tmp/repo/plugins" />
		<copy todir="/tmp/repo/plugins" file="../com.ibm.rtcexts.mybuildparticipant.common/com.ibm.rtcexts.mybuildparticipant.common_${build.common.version}.jar" />
		<copy todir="/tmp/repo/plugins" file="../com.ibm.rtcexts.mybuildparticipant.client/com.ibm.rtcexts.mybuildparticipant.client_${build.client.version}.jar" />
		<copy todir="/tmp/repo/features" file="../com.ibm.rtcexts.mybuildparticipant.feature/com.ibm.rtcexts.mybuildparticipant.feature_${build.feature.version}.jar" />
	</target>

</project>
